# .github/workflows/build-and-release.yml

name: AutoHotkey Build and Release

on:
  push:
    tags:
      - 'v*'
  release:
    types: [published]

jobs:
  build:
    runs-on: windows-latest # 编译环境为 Windows

    steps:
      - name: Checkout repository # 拉取仓库代码
        uses: actions/checkout@v4

      - name: Build AutoHotkey Executable # 编译 AutoHotkey 脚本为可执行文件
        uses: benmusson/ahk2exe-action@v1 # 使用指定的 ahk2exe Action 版本
        with:
          in: .\Main.ahk # 输入脚本路径
          out: .\Main.exe # 输出可执行文件路径和名称
          icon: .\UI_Main_Icon.ico # 可选：指定图标文件路径
          target: x64 # 编译目标架构
          ahk-tag: v2.0.12 # <-- 修改此处：明确指定 AutoHotkey V2 的稳定版本
                               # 推荐使用具体的稳定版本号，例如 'v2.0.12'。
                               # 如果需要最新版，请根据 AutoHotkey 的 Releases 页面找到最新稳定版的标签。

      - name: Generate Archive Name # 生成压缩包名称
        id: create_archive_name # 为此步骤设置一个ID，以便在后续步骤中引用其输出
        run: |
          # 获取 Release Tag，并移除前缀 'v' (例如，v1.0.0 -> 1.0.0)
          $tag = "${{ github.event.release.tag }}"
          $version = $tag -replace '^v', ''
          # 根据您的要求，使用 -x86 后缀命名压缩包
          $archiveName = "${version}-x86.zip"
          echo "archive_name=$archiveName" >> $Env:GITHUB_OUTPUT # 将生成的文件名设置为步骤输出

      - name: Create Release Archive # 压缩所有相关文件和文件夹
        run: |
          $archiveFilePath = "${{ steps.create_archive_name.outputs.archive_name }}"
          # 明确引用 $archiveFilePath，确保它被视为一个完整的字符串，避免解析问题
          # 确保 .\lib 文件夹存在，否则此命令可能会失败
          Compress-Archive -Path .\Main.ahk, .\UI_MainMenu_Background.png, .\UI_Main_Icon.ico, .\config.ini, .\Main.exe, .\lib -DestinationPath "$archiveFilePath"

      - name: Upload Release Asset # 将编译好的 .exe 文件作为 Release Asset 上传
        uses: actions/upload-release-asset@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }} # GitHub 自动提供的用于认证的 token
        with:
          upload_url: ${{ github.event.release.upload_url }} # 上传到当前 Release 的 URL
          asset_path: ./${{ steps.create_archive_name.outputs.archive_name }} # 要上传的压缩包的路径
          asset_name: ${{ steps.create_archive_name.outputs.archive_name }} # Release 中显示的资产名称
          asset_content_type: application/zip # 压缩包的文件类型
